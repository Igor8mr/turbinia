#!/bin/bash
#
# This script provides tools to be used with the TurbiniaEvidence keys in
# Redis. There are 5 main functions: keys, values, delete, dump and restore.
# The first five will query over Redis to find keys that have the same value
# in a specific field, as determined by the passed arguments. Restore will
# restore all keys dumped in a directory. If [Field Name] and [Field Value] 
# are replaced with "all", all keys will be selected. 
# 
# ./redis-tools keys [Field Name] [Field Value]
# The matching keys are printed out.
# 
# ./redis-tools values [Field Name] [Field Value]
# The values of the matching keys are printed out.
# 
# ./redis-tools delete [Field Name] [Field Value]
# The matching keys are deleted from redis.
# 
# ./redis-tools dump [Field Name] [Field Value] [Directory to Dump]
# The matching keys are dumped to the indicated directory.
# 
# ./redis-tools restore [Directory to Restore] 
# The keys dumped in the directory are restored.
#
# Examples: 
# ./redis-tools keys all
# ./redis-tools values id f5bd194d9424427c9d82a57eedc531d0
# ./redis-tools dump request_id 09879dbc90a44c6db80dc9f68113d829 storagefolder
# ./redis-tools delete all
# ./redis-tools restore storagefolder

action=$1 # "keys" / "values" / "delete" / "dump" / "restore"
arg1=$2
arg2=$3
arg3=$4

if [[ "$action" == "restore" ]]
then
  for filename in "$arg1"/*; do
    key="$(echo "$filename" | sed 's|.*/||')"
    echo Restoring "$key"
    cat "$filename" | redis-cli -x restore "$key" 0
  done
else
  # Ignores [Field Value] if "all" is passed
  if [[ "$arg1" == "all" ]]; then arg3=$arg2; fi

  if [[ "$action" != "values" ]]; then
    declare -a key_array
    if [[ "$action" == keys ]] || [[ "$arg1" != "all" ]]; then echo Keys found:; fi
  fi

  for key in $(redis-cli --scan); do 
    key_type=${key%:*}
    if [[ "$key_type" == "TurbiniaTask" ]]; then
      # Gets the Task value and split its key:value pairs into an array
      value=$(redis-cli get "$key")
      modified_value="${value//\"/}"
      modified_value="${modified_value//\{/}"
      modified_value="${modified_value//\}/}"
      IFS=',' read -r -a array <<< "$modified_value"

      if [[ "$arg1" == "all" ]]
      then
        if [[ "$action" == "values" ]]
        then
          echo -e "$value\n"
        else
          if [[ "$action" == keys ]]; then echo "$key"; fi
          key_array+=( "$key" )
        fi
      else
        for pair in "${array[@]}"; do
          # Cleans the pair to allow comparison with given field and value
          pair="${pair#"${pair%%[![:space:]]*}"}"
          if [[ "$pair"  == "$arg1: $arg2" ]]
          then
            if [[ "$action" == "values" ]]; then
              echo -e "$value\n";
            else
              echo "$key"
              key_array+=( "$key" )
            fi
            break
          fi
        done
      fi
    fi
  done

  if [[ "$action" == "delete" ]] || [[ "$action" == "dump" ]]
  then
    echo Do you want to "$action" "${#key_array[@]}" keys? [y/N]
    read -r answer
    if [[ "$answer" == 'y' ]] || [[ "$answer" == 'Y' ]]; then
      if [[ "$action" == "delete" ]]
      then
        redis-cli DEL "${key_array[@]}"
      else
        mkdir -p "$arg3"
        for key in ${key_array[@]}; do
          redis-cli --raw dump "$key" | head -c-1 > "$arg3"/"$key"
        done
        echo Dumped in "$arg3"
      fi
    fi
  fi
fi
